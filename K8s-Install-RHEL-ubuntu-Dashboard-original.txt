------
------
UBUNTU
------
------



curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
sudo -i
# Run these commands as root
###Install GO###
wget https://storage.googleapis.com/golang/getgo/installer_linux
chmod +x ./installer_linux
./installer_linux
source ~/.bash_profile
git clone https://github.com/Mirantis/cri-dockerd.git
cd cri-dockerd
mkdir bin
go get && go build -o bin/cri-dockerd
mkdir -p /usr/local/bin
install -o root -g root -m 0755 bin/cri-dockerd /usr/local/bin/cri-dockerd
cp -a packaging/systemd/* /etc/systemd/system
sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service
systemctl daemon-reload
systemctl enable cri-docker.service
systemctl enable --now cri-docker.socket
usermod -aG docker ubuntu

-------------------------------------
After that follow the second steps:-
-------------------------------------

sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl
curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl


--------------------------------------
After this only RUN on MASTER Node:-
--------------------------------------


kubeadm init --pod-network-cidr=10.244.0.0/16 --cri-socket unix:///var/run/cri-dockerd.sock


For Root User:-
----------------
export KUBECONFIG=/etc/kubernetes/admin.conf

For other user:-
-----------------

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config


------------------------
Finally apply flannel:-
------------------------

kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml  --->  DON'T  USE  THIS  ONE.

kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml   --->  USE THIS





--------------------------------------------------------
Once the command is succesful you would get and output:-
--------------------------------------------------------

    kubeadm join 172.31.9.186:6443 --token oc7nyd.g36rl6lycyk15ywl \
           --discovery-token-ca-cert-hash sha256:ef3f2b626d6168b4d2cbb64a044285def92423aa312f37405d49adb31a356815


------------------------------------------------------
Instead add some changes and add to the worker nodes:-
------------------------------------------------------

    kubeadm join 172.31.15.210:6443 --token cnqr7t.kh8mc0za2vzql5l8         --discovery-token-ca-cert-hash              sha256:d9ab7d238a3176a676acc2a63034f3feeb6d33c81f4285aadf83a7551eb241e3 --cri-socket unix:///var/run/cri-dockerd.sock



----------------------------------------------------------------------------------
Remember:- Add changes to the token shown above and then paste on the worker nodes
----------------------------------------------------------------------------------


















--------------
--------------
REDHAT LINUX 8         -------->       NOT RHEL9
--------------
--------------


sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo systemctl start docker
sudo systemctl status docker
sudo usermod -aG docker ec2-user

### Run these commands as root
cat > /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF


modprobe overlay
modprobe br_netfilter


### Setup required sysctl params, these persist across reboots.
cat > /etc/sysctl.d/99-kubernetes-cri.conf <<EOF
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF


sysctl --system
dnf install -y  yum-utils device-mapper-persistent-data lvm2
dnf update -y && dnf install -y containerd.io
mkdir -p /etc/containerd
containerd config default > /etc/containerd/config.toml
systemctl restart containerd
systemctl enable containerd


### Add yum repo file for Kubernetes 
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF


dnf install -y kubeadm-1.27.2 kubelet-1.27.2 kubectl-1.27.2
systemctl enable kubelet
echo 'KUBELET_EXTRA_ARGS="--fail-swap-on=false"' > /etc/sysconfig/kubelet
systemctl start kubelet




--------------------------------------
After this only RUN on MASTER Node:-
--------------------------------------


kubeadm init --pod-network-cidr=10.244.0.0/16


For Root User:-
----------------
export KUBECONFIG=/etc/kubernetes/admin.conf   ----------->> when restart the server use this to activate k8s

For other user:-
-----------------

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config


------------------------
Finally apply flannel:-
------------------------

kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml  --->  DON'T  USE  THIS  ONE.

kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml   --->  USE THIS


-----------------------------------------------------------------------------------
Once the command is succesful you would get an output and add to the worker nodes:-
-----------------------------------------------------------------------------------

kubeadm join 172.31.10.152:6443 --token h91kn5.1xawihhi0huh1r0a \
        --discovery-token-ca-cert-hash sha256:7c71c6873e88ef6870201d0ad801b109914b97338f043ee83e861fda3b4d0091













---------------------------
---------------------------
Access Kubectl Dashboard:-
---------------------------
---------------------------


https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/      ----> Link for the Installation of Dashboard



kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml

### Create a Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin
  namespace: kubernetes-dashboard


### Create a ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin
  namespace: kubernetes-dashboard




kubectl get svc -n kubernetes-dashboard
kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard
---------
Find type: ClusterIP && change to type: LoadBalancer
---------
kubectl -n kubernetes-dashboard create token admin




Now, access the cluster with:-
------------------------------

"https://<public-ip>:port-in-nodeport in n kubernetes-dashboard svc "










